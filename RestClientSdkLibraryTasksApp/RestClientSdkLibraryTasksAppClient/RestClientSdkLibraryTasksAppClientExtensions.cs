// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace RestClientSdkLibraryTasksApp
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for RestClientSdkLibraryTasksAppClient.
    /// </summary>
    public static partial class RestClientSdkLibraryTasksAppClientExtensions
    {
            /// <summary>
            /// Gets the requested task based on id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetTaskById(this IRestClientSdkLibraryTasksAppClient operations, int id)
            {
                return Task.Factory.StartNew(s => ((IRestClientSdkLibraryTasksAppClient)s).GetTaskByIdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the requested task based on id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTaskByIdAsync(this IRestClientSdkLibraryTasksAppClient operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTaskByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates or Creates a task NOTE: DATE FORMAT EX: "Friday, April 10, 2009"
            /// --&gt; Date must be an actual calendar date
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the task.
            /// </param>
            /// <param name='body'>
            /// The task.
            /// </param>
            public static object UpdateOrCreateTaskAsync(this IRestClientSdkLibraryTasksAppClient operations, int id, TodoTaskUpdatePayload body = default(TodoTaskUpdatePayload))
            {
                return Task.Factory.StartNew(s => ((IRestClientSdkLibraryTasksAppClient)s).UpdateOrCreateTaskAsyncAsync(id, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates or Creates a task NOTE: DATE FORMAT EX: "Friday, April 10, 2009"
            /// --&gt; Date must be an actual calendar date
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the task.
            /// </param>
            /// <param name='body'>
            /// The task.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateOrCreateTaskAsyncAsync(this IRestClientSdkLibraryTasksAppClient operations, int id, TodoTaskUpdatePayload body = default(TodoTaskUpdatePayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateOrCreateTaskAsyncWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a task using the provided id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the task.
            /// </param>
            public static IDictionary<string, object> DeleteTaskById(this IRestClientSdkLibraryTasksAppClient operations, int id)
            {
                return Task.Factory.StartNew(s => ((IRestClientSdkLibraryTasksAppClient)s).DeleteTaskByIdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a task using the provided id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The identifier of the task.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, object>> DeleteTaskByIdAsync(this IRestClientSdkLibraryTasksAppClient operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTaskByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of tasks in the database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object GetAllTodoTasks(this IRestClientSdkLibraryTasksAppClient operations)
            {
                return Task.Factory.StartNew(s => ((IRestClientSdkLibraryTasksAppClient)s).GetAllTodoTasksAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of tasks in the database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllTodoTasksAsync(this IRestClientSdkLibraryTasksAppClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllTodoTasksWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a task NOTE: DATE FORMAT EX: "Friday, April 10, 2009" --&gt; Date
            /// must be an actual calendar date
            /// Converts to  standard ISO 8601
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object CreateAtodoTaskAsync(this IRestClientSdkLibraryTasksAppClient operations, TodoTaskCreatePayload body = default(TodoTaskCreatePayload))
            {
                return Task.Factory.StartNew(s => ((IRestClientSdkLibraryTasksAppClient)s).CreateAtodoTaskAsyncAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a task NOTE: DATE FORMAT EX: "Friday, April 10, 2009" --&gt; Date
            /// must be an actual calendar date
            /// Converts to  standard ISO 8601
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateAtodoTaskAsyncAsync(this IRestClientSdkLibraryTasksAppClient operations, TodoTaskCreatePayload body = default(TodoTaskCreatePayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateAtodoTaskAsyncWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
